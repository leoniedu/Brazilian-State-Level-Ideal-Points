library(ggplot2)
library(Hmisc)
library(foreign)

normalize.df <- function(x) {
    data.frame(lapply(x, function(z) if (is.character(z)|is.factor(z)) {
        tolower(z)
    } else {
        z
    }))
}



years <- c(1990, 1993, 1997, 2001, 2005)
dnow <- lapply(years, function(i) {
  res <- read.spss(paste(i, "-survey-weighted.sav", sep="")
                   , to.data.frame=TRUE)
  names(res) <- tolower(names(res))
  res
})
years <- c(years, 2009)
dnow <- c(dnow, list(read.dta("plio139-23aug.dta")))
dnow[[1]] <- within(dnow[[1]], {
    resp <- ave(ppweight, pp90, FUN=length)
    seats <- ((ppweight*resp)/length(ppweight))*570
    rs <- resp/seats
})
dnow[[2]] <- within(dnow[[2]], {
    resp <- ave(ppweight, pp93, FUN=length)
    seats <- ((ppweight*resp)/length(ppweight))*584
    rs <- resp/seats
})
dnow[[3]] <- within(dnow[[3]], {
    resp <- ave(ppweight, pp97, FUN=length)
  seats <- ((ppweight*resp)/length(ppweight))*594
    rs <- resp/seats
})
dnow[[4]] <- within(dnow[[4]], {
    resp <- ave(ppweight, pp2001, FUN=length)
    seats <- ((ppweight*resp)/length(ppweight))*594
    rs <- resp/seats
})
dnow[[5]] <- within(dnow[[5]], {
    resp <- ave(ppweight, pp2005, FUN=length)
    seats <- ((ppweight*resp)/length(ppweight))*594
    rs <- resp/seats
})
dnow[[6]] <- within(dnow[[6]], {
    resp <- ave(pweight, pp2009, FUN=length)
    seats <- ((pweight*resp)/length(pweight))*594
    rs <- resp/seats
})
names(dnow) <- years
dnow <- lapply(dnow,
               function(x) {
                   if (!"ppvsreg"%in%names(x)) {
                       x$ppvsreg <- NA
                   }
                   x$ppvsreg <- tolower(x$ppvsreg)
                   x
               }
               )

dnow[[1]]$party <- dnow[[1]]$pp90
dnow[[2]]$party <- dnow[[2]]$pp93
dnow[[3]]$party <- dnow[[3]]$pp97
dnow[[4]]$party <- dnow[[4]]$pp2001
dnow[[5]]$party <- dnow[[5]]$pp2005
dnow[[6]]$party <- dnow[[6]]$pp2009


library(plyr)
dall <- ldply(dnow,
              function(x) {
                  res <- data.frame(x[,c("caseid", "party", "ppvsreg", "resp", "seats", "rs", "state",grep("^lr.*", names(x), value=TRUE))])
                  res
              }
              )
dall <- normalize.df(dall)
dall$lrdiap <- NULL



recode.party <- function(x) car::recode(x, "'dem'='pfl'; c('pcdb','pc do b')='pcdob'; c('pp','ppr-pds-pdc','ppb-ppr','ppb','pds')='pp'")
dall$partyrec <- recode.party(dall$party)




dall$localism <- factor(dall$ppvsreg, levels=c("votes party interests",
                                      "splits party and local interests",
                                      "votes local interests"))

save(dall, file="dall.RData")


p <- qplot(.id, value, colour=localism, data=melt(prop.table(with(dall, table(localism, .id)), margin=2))) + scale_y_continuous(name="", limits=c(0,1)) + theme_bw()


lr <- dall
lr <- subset(dall, .id==2009)
lr$year <- as.numeric(as.character(lr$.id))
lr$.id <- NULL
mv <- grep("lr",names(lr), value=TRUE)
mv <- mv[!mv%in%"lrclass"]
lr <- melt(lr,
           id.var=c("year", "caseid", "party",  "state", "lrclass"),
           measure.var=mv)
lr <- subset(lr,(!is.na(value)))
## party of the legislator
##lr$party.j.factor <- factor(recode.party(lr$party), levels=levels(lr$party.i.factor))
lr$party.i.factor <- factor(recode.party(lr$party))
## party measured
lr$party.j.factor <- factor(recode.party(substr(lr$variable,3,100)), levels=levels(lr$party.i.factor))
lr$party.i <- as.numeric(lr$party.i.factor)
lr$party.j <- as.numeric(lr$party.j.factor)



lr$legis.factor <- with(lr, factor(paste(year,caseid,sep=";")))
lr$legis <- as.numeric(lr$legis.factor)



lrself <- unique(subset(lr, select=c(legis, legis.factor, party.i, party.i.factor, lrclass)))
lrself <- lrself[order(lrself$legis),]


    
n.rows <- nrow(lr)
y <- lr$value
legis <- lr$legis
party.j <- lr$party.j
n.legis <- max(legis)
n.party <- max(party.i)
party.i <- lrself$party.i
lrclass <- lrself$lrclass

inits <- function(){
    b0 <- rnorm(n.legis)
    b1 <- runif(n.legis)
    list(b0=b0, b1=b1, sigma.y=runif(1), sigma.0=runif(1), sigma.1=runif(1))    
}


parameters.to.save <- c("b0","b1" , "sigma.y", "sigma.0", "sigma.1", "pi", "mu.0", "mu.1"
                        , "pi.pp"##, "b0.pp","b1.pp"                        
                        , "mu.lr", "sigma.lr","lrclass"
                        )

## missing data on lrclass. have to predict outside bugs
jags.data <- Hmisc::llist(y, party.i, party.j, legis, n.rows, n.party, n.legis
                          , lrclass
                          )


library(R2WinBUGS)
library(rjags)
source("~/reps/eduRdo/R/utils.R")

try(rm(jags1,jags1.s))
system.time(jags1 <- jags.model(file="model3pp.bug",data=jags.data, inits=inits, n.adapt=1000,n.chains=2))

system.time(jags1.s <- coda.samples(jags1,variable.names=parameters.to.save, n.iter=10000 , thin=10))


parameters.to.save2 <- c("b0","b1" , "sigma.y", "sigma.0", "sigma.1", "pi", "mu.0", "mu.1"
                        , "pi.pp"
                        )


try(rm(jags2,jags2.s))
system.time(jags2 <- jags.model(file="model4pp.bug",data=jags.data, inits=inits, n.adapt=1000,n.chains=2))

system.time(jags2.s <- coda.samples(jags2,variable.names=parameters.to.save2, n.iter=10000 , thin=10))



parameters.to.save3 <- c("b0","b1" , "sigma.y", "sigma.0", "sigma.1", "pi", "mu.0", "mu.1" , "pi.pp", "mu.lr", "mu.lrclass", "sigma.lrclass" )



try(rm(jags3,jags3.s))
system.time(jags3 <- jags.model(file="model5pp.bug",data=jags.data, inits=inits, n.adapt=1000,n.chains=2))

system.time(jags3.s <- coda.samples(jags3,variable.names=parameters.to.save3, n.iter=10000 , thin=10))


tmp <- merge(recast(lrself,party.i~variable,measure.var="lrclass", fun.aggregate=mean, na.rm=TRUE),
             data.frame(party.i=1:n.party,pi.pp=coda2bugs(jags1.s,parms.tokeep="pi.pp")$mean[[1]]))
tmp <- merge(tmp,data.frame(party.i=1:n.party,pi.pp2=coda2bugs(jags2.s,parms.tokeep="pi.pp")$mean[[1]]))
tmp <- merge(tmp,data.frame(party.i=1:n.party,pi.pp3=coda2bugs(jags3.s,parms.tokeep="pi.pp")$mean[[1]])) 


, cor(lrclass[-1],pi.pp[-1]))




tmp <- coda2bugs(jags1.s, parms.tokeep="pi")
shift <- apply(tmp$sims.list$pi,1,mean)
scale <- apply(tmp$sims.list$pi,1,sd)
##shift <- 0
##scale <- 1
pi <- (tmp$sims.list$pi-shift)/scale
b0 <- (coda2bugs(jags1.s, parms.tokeep="b0")$sims.list$b0-shift)*scale
b1 <- (coda2bugs(jags1.s, parms.tokeep="b1")$sims.list$b1)*scale




ploc <- data.frame(party=levels(lr$party.i.factor), xparty=party$median[[1]], xpartysd=party$sd[[1]])
tmp <- recast(lr, party.i.factor ~ variable, id.var=c("party.i.factor"), measure.var="value", fun.aggregate=mean, na.rm=TRUE)
names(tmp) <- c("party", "xpartyraw")
ploc <- merge(ploc, tmp)
save(ploc, file="ploc.RData")


lrpos <- merge(lrself, data.frame(legis=1:n.legis, b0=b0$median[[1]], b1=b1$median[[1]]))

lrpos$x <- with(lrpos, b0+b1*lrclass)

lrpos <- merge(ploc, lrpos, by.x="party" ,by.y="party.j.factor")




## summary by party
lrpos$variable <- NULL
tmp <- recast(lrpos, party ~ variable, measure.var=c("x", "lrclass", "xparty", "xpartyraw"), fun.aggregate=mean, na.rm=TRUE)

qplot(x, xparty, data=tmp)





qplot(x, data=subset(lrpos, party.j.factor=="pmdb"), facets=~state, xlim=c(1,10))









library(Zelig)
m1 <- zelig(localism ~ .id + party , data=dall, model="ologit")




library(Design)

lrm(localism ~ party + .id , data=dall)

dim(dall)



theme_bw
function (base_size = 12) 
{
    structure(list(axis.line = theme_blank(),
                   axis.text.x = theme_text(size = base_size * 
                     0.8, lineheight = 0.9, vjust = 1),
                   axis.text.y = theme_text(size = base_size * 
                     0.8, lineheight = 0.9, hjust = 1),
                   axis.ticks = theme_segment(colour = "black", 
                     size = 0.2),
                   axis.title.x = theme_text(size = base_size, 
                     vjust = 1),
                   axis.title.y = theme_text(size = base_size, 
                     angle = 90, vjust = 0.5), axis.ticks.length = unit(0.3, 
        "lines"), axis.ticks.margin = unit(0.5, "lines"), legend.background = theme_rect(colour = NA), 
        legend.key = theme_rect(colour = "grey80"), legend.key.size = unit(1.2, 
            "lines"), legend.text = theme_text(size = base_size * 
            0.8), legend.title = theme_text(size = base_size * 
            0.8, face = "bold", hjust = 0), legend.position = "right", 
        panel.background = theme_rect(fill = "white", colour = NA), 
        panel.border = theme_rect(fill = NA, colour = "grey50"), 
        panel.grid.major = theme_line(colour = "grey90", size = 0.2), 
        panel.grid.minor = theme_line(colour = "grey98", size = 0.5), 
        panel.margin = unit(0.25, "lines"), strip.background = theme_rect(fill = "grey80", 
            colour = "grey50"), strip.text.x = theme_text(size = base_size * 
            0.8), strip.text.y = theme_text(size = base_size * 
            0.8, angle = -90), plot.background = theme_rect(colour = NA), 
        plot.title = theme_text(size = base_size * 1.2), plot.margin = unit(c(1, 
            1, 0.5, 0.5), "lines")), class = "options")
}



qplot(years, sapply(dnow, nrow)) + scale_y_continuous(limits=c(0, 513), expand=c(0, 0)) +scale_x_continuous(limits=c(min(c(years)), 2013), breaks=c(years, 2009))+
  annotate("text", x=2009, y=110, label="?", size=8, colour="darkblue")+
  annotate("text", x=2013, y=90, label="?", size=8, colour="darkred")+theme_bw()
